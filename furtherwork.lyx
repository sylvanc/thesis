#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extreport
\use_default_options true
\begin_modules
fixltx2e
fix-cm
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Evaluation-and-Further"

\end_inset

Conclusion and Further Work
\end_layout

\begin_layout Standard
This thesis has presented a new programming language, Pony, that is the
 result of co-designing a data-race free type system and a scalable, lock-free
 runtime.
 We have presented several novel type system and runtime elements, and combined
 them in a working open source compiler and runtime.
 Specifically, we have detailed a unified actor-model operational semantics
 for concurrent and distributed execution, a novel type system for data-race
 freedom based on 
\emph on
reference capabilities
\emph default
, a novel no-stop-the-world garbage collection algorithm for actors, a novel
 no-stop-the-world garbage collection algorithm for zero-copy message passing,
 and a complete runtime implementation.
\end_layout

\begin_layout Standard
The operational semantics define a unified semantics for concurrent and
 distributed execution of an actor-model language that accounts for differences
 in message causality.
 The semantics provides an extensible framework for the remainder of the
 thesis.
\end_layout

\begin_layout Standard
Reference capabilities, and the related concepts of viewpoint adaptation,
 safe-to-write, and aliased and unaliased types, provide a statically data-race
 free type system in which concepts such as isolation and immutability are
 derived rather than fundamental.
 This approach both enables and informs the design of the runtime, for example
 by allowing safe zero-copy message passing and no-stop-the-world garbage
 collection.
\end_layout

\begin_layout Standard
The 
\emph on
MAC
\emph default
 protocol, message-based actor collection, allows actors themselves to be
 safely garbage collected fully concurrently.
 The underlying Conf-Ack protocol, which establishes that a possibly out-of-date
 view of global state was up-to-date at the time it was generated, is also
 used for quiescence detection and program termination.
 In the distributed setting, the Conf-Ack protocol can be extended for distribut
ed actor collection and migration.
\end_layout

\begin_layout Standard
The 
\emph on
ORCA 
\emph default
protocol, ownership and reference counting for actors, is an extension of
 
\emph on
MAC
\emph default
 that allows for no-stop-the-world garbage collection of passive objects
 that have been shared by reference across actors with independent heaps.
 This enables both zero-copy message passing and scalable garbage collection.
\end_layout

\begin_layout Standard
The runtime implementation is also described, showing the impact of the
 type system and the garbage collection protocols on other areas, such as
 the memory allocator, the scheduler, and asynchronous I/O.
 The feedback loop between type system and runtime design decisions is shown
 through the examination of details of the implementation.
\end_layout

\begin_layout Section
Further Work
\end_layout

\begin_layout Standard
There are several avenues of further work that present themselves.
\end_layout

\begin_layout Standard
The extensions for distributed computing discussed for 
\emph on
MAC 
\emph default
and 
\emph on
ORCA
\emph default
 are a starting point for a distributed runtime.
 Other essential elements for a distributed runtime include a machine-specific
 data type system that can distinguish data that is meaningful when sent
 to another node from data which is not (for example, a file descriptor
 is serialisable but meaningless or worse to the receiver).
 This also requires a notion of locality: that is, machine-specific data
 can be sent to an actor that is on the same node, but that actor must 
\emph on
remain
\emph default
 on the same node in the future.
\end_layout

\begin_layout Standard
As in all distributed computation projects, a strong approach to node failure
 must be adopted, whether in the form of Erlang-like supervision, or EROS-like
 orthogonal persistence.
 Similarly difficult is the development of heuristics for distributed work-steal
ing that are useful for many classes of workload.
\end_layout

\begin_layout Standard
Other open questions include the nature of reflection in a capabilities-secure
 environment, the integration of live programming in the form of a REPL
 and hot code loading, and tools for software engineering actor-model distribute
d systems, including distributed debugging and message tracing.
\end_layout

\begin_layout Section
Continuing Efforts
\end_layout

\begin_layout Standard
Finally, we would like to quote Mark S.
 Miller: 
\begin_inset Quotes eld
\end_inset

Any dissertation necessarily reflects the state of an ongoing project at
 a particular point in time.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "miller2006robust"

\end_inset

 Work on Pony is continuing, both academically and in the open source community,
 and while it is our hope that this thesis is valuable to the reader, it
 is also our hope that it quickly becomes outdated.
\end_layout

\end_body
\end_document
